{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:cipher/api.dart","id":"cipher.api","comment":"\nThis is the API specification library for the cipher project.\n\nIt declares all abstract types used by the cipher library. In addition, it implements the factories mechanism that allows\nusers to instantiate algorithms by their standard name.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Signature","refId":"cipher.api/Signature"}],"kind":"class","name":"ECSignature","id":"ECSignature","comment":"A [Signature] created with ECC.","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"159"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"161"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"167"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"isFinal":true,"kind":"variable","name":"r","id":"r","line":"154"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"isFinal":true,"kind":"variable","name":"s","id":"s","line":"155"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"initializedField":{"name":"r","refId":"cipher.api/ECSignature/r"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"initializedField":{"name":"s","refId":"cipher.api/ECSignature/s"},"kind":"param","name":"s","id":"s"}],"line":"157"}],"uri":"package:cipher/src/api/ecc.dart","line":"152"},{"superclass":{"name":"ECAsymmetricKey","refId":"cipher.api/ECAsymmetricKey"},"interfaces":[{"name":"PublicKey","refId":"cipher.api/PublicKey"}],"kind":"class","name":"ECPublicKey","id":"ECPublicKey","comment":"Public keys in ECC","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"139"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"145"},{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"isFinal":true,"kind":"variable","name":"Q","id":"Q","comment":"ECC's Q public parameter","line":"134"},{"kind":"constructor","name":"","id":"2()","comment":"Create an ECC public key for the given Q and domain parameters.","children":[{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"initializedField":{"name":"Q","refId":"cipher.api/ECPublicKey/Q"},"kind":"param","name":"Q","id":"Q"},{"ref":{"name":"ECDomainParameters","refId":"cipher.api/ECDomainParameters"},"kind":"param","name":"parameters","id":"parameters"}],"line":"137"}],"uri":"package:cipher/src/api/ecc.dart","line":"131"},{"superclass":{"name":"ECAsymmetricKey","refId":"cipher.api/ECAsymmetricKey"},"interfaces":[{"name":"PrivateKey","refId":"cipher.api/PrivateKey"}],"kind":"class","name":"ECPrivateKey","id":"ECPrivateKey","comment":"Private keys in ECC","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"118"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"124"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"isFinal":true,"kind":"variable","name":"d","id":"d","comment":"ECC's d private parameter","line":"113"},{"kind":"constructor","name":"","id":"2()","comment":"Create an ECC private key for the given d and domain parameters.","children":[{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"initializedField":{"name":"d","refId":"cipher.api/ECPrivateKey/d"},"kind":"param","name":"d","id":"d"},{"ref":{"name":"ECDomainParameters","refId":"cipher.api/ECDomainParameters"},"kind":"param","name":"parameters","id":"parameters"}],"line":"116"}],"uri":"package:cipher/src/api/ecc.dart","line":"110"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"AsymmetricKey","refId":"cipher.api/AsymmetricKey"}],"kind":"class","name":"ECAsymmetricKey","id":"ECAsymmetricKey","comment":"Base class for asymmetric keys in ECC","children":[{"ref":{"name":"ECDomainParameters","refId":"cipher.api/ECDomainParameters"},"isFinal":true,"kind":"variable","name":"parameters","id":"parameters","comment":"The domain parameters of this key","line":"102"},{"kind":"constructor","name":"","id":"1()","comment":"Create an asymmetric key for the given domain parameters","children":[{"ref":{"name":"ECDomainParameters","refId":"cipher.api/ECDomainParameters"},"initializedField":{"name":"parameters","refId":"cipher.api/ECAsymmetricKey/parameters"},"kind":"param","name":"parameters","id":"parameters"}],"line":"105"}],"uri":"package:cipher/src/api/ecc.dart","line":"99"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ECCurve","id":"ECCurve","comment":"An elliptic curve","children":[{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"method","name":"fromBigInteger","id":"fromBigInteger1()","comment":"Create an [ECFieldElement] on this curve from its big integer value.","children":[{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"param","name":"x","id":"x"}],"line":"83"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"method","name":"createPoint","id":"createPoint3()","comment":"Create an [ECPoint] on its curve from its coordinates","children":[{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"param","name":"x","id":"x"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"param","name":"y","id":"y"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"withCompression","id":"withCompression"}],"line":"86"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"method","name":"decompressPoint","id":"decompressPoint2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"yTilde","id":"yTilde"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"param","name":"X1","id":"X1"}],"line":"88"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"method","name":"decodePoint","id":"decodePoint1()","comment":"\nDecode a point on this curve from its ASN.1 encoding. The different encodings are taken account of, including point\ncompression for Fp (X9.62 s 4.2.1 pg 17).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"encoded","id":"encoded"}],"line":"94"},{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"property","name":"a","id":"a","line":"76"},{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"property","name":"b","id":"b","line":"77"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"fieldSize","id":"fieldSize","line":"79"},{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"property","name":"infinity","id":"infinity","line":"80"}],"uri":"package:cipher/src/api/ecc.dart","line":"74"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ECPoint","id":"ECPoint","comment":"An elliptic curve point","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"58"},{"returnType":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"method","name":"getEncoded","id":"getEncoded1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"compressed","id":"compressed"}],"line":"60"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"isOperator":true,"kind":"method","name":"+","id":"+1()","children":[{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"param","name":"b","id":"b"}],"line":"62"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"isOperator":true,"kind":"method","name":"-","id":"-1()","children":[{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"param","name":"b","id":"b"}],"line":"63"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","line":"64"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"method","name":"twice","id":"twice0()","line":"66"},{"returnType":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"Multiply this point by the given number [k].","children":[{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"param","name":"k","id":"k"}],"line":"69"},{"ref":{"name":"ECCurve","refId":"cipher.api/ECCurve"},"kind":"property","name":"curve","id":"curve","line":"51"},{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"property","name":"x","id":"x","line":"52"},{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"property","name":"y","id":"y","line":"53"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isCompressed","id":"isCompressed","line":"55"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isInfinity","id":"isInfinity","line":"56"}],"uri":"package:cipher/src/api/ecc.dart","line":"49"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ECFieldElement","id":"ECFieldElement","comment":"Type for coordinates of an [ECPoint]","children":[{"returnType":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"method","name":"toBigInteger","id":"toBigInteger0()","line":"29"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"isOperator":true,"kind":"method","name":"+","id":"+1()","children":[{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"param","name":"b","id":"b"}],"line":"35"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"isOperator":true,"kind":"method","name":"-","id":"-1()","children":[{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"param","name":"b","id":"b"}],"line":"36"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"isOperator":true,"kind":"method","name":"*","id":"*1()","children":[{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"param","name":"b","id":"b"}],"line":"37"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"isOperator":true,"kind":"method","name":"/","id":"#slash1()","children":[{"ref":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"param","name":"b","id":"b"}],"line":"38"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","line":"40"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"method","name":"invert","id":"invert0()","line":"42"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"method","name":"square","id":"square0()","line":"43"},{"returnType":{"name":"ECFieldElement","refId":"cipher.api/ECFieldElement"},"kind":"method","name":"sqrt","id":"sqrt0()","line":"44"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"fieldName","id":"fieldName","line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"fieldSize","id":"fieldSize","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"byteLength","id":"byteLength","line":"33"}],"uri":"package:cipher/src/api/ecc.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ECDomainParameters","id":"ECDomainParameters","comment":"Standard ECC curve description","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"domainName","id":"domainName","comment":"Get this domain's standard name.","line":"14"},{"ref":{"name":"ECCurve","refId":"cipher.api/ECCurve"},"kind":"property","name":"curve","id":"curve","line":"16"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"seed","id":"seed","line":"17"},{"ref":{"name":"ECPoint","refId":"cipher.api/ECPoint"},"kind":"property","name":"G","id":"G","line":"18"},{"ref":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"property","name":"n","id":"n","line":"19"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [ECDomainParameters] objects","line":"11"},{"returnType":{"name":"ECDomainParameters","refId":"cipher.api/ECDomainParameters"},"kind":"constructor","name":"","id":"1()","comment":"Create a curve description from its standard name","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"domainName","id":"domainName"}],"line":"22"}],"uri":"package:cipher/src/api/ecc.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EntropySource","id":"EntropySource","comment":"\nAn asynchronous source of pure random data (entropy). Data returned by an [EntropySource] should be supposed to be\nunpredictable and of more quality than data obtained from a [SecureRandom]. Usually an [EntropySource] should be seen like\na random generation device while a [SecureRandom] should be seen like a cryptographic PRNG.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"seed","id":"seed1()","comment":"Seed the [EntropySource].","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"65"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Uint8List","refId":"dart.typed_data/Uint8List"}]},"kind":"method","name":"getBytes","id":"getBytes1()","comment":"Get [count] random bytes from the entropy source.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"68"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"sourceName","id":"sourceName","comment":"Get this entropy source name.","line":"62"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [EntropySource] objects","line":"56"},{"returnType":{"name":"EntropySource","refId":"cipher.api/EntropySource"},"kind":"constructor","name":"","id":"1()","comment":"Create the entropy source specified by the standard [sourceName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"sourceName","id":"sourceName"}],"line":"59"}],"uri":"package:cipher/src/api/random.dart","line":"53"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"SecureRandom","id":"SecureRandom","comment":"\nA synchronous secure random number generator (RNG).\n\nBeing synchronous, this RNG cannot return direct results from sources of randomness like \"/dev/random\" or similar. For that,\nuse an [EntropySource] which allows to be called asynchronously. Usually an [EntropySource] should be seen like a random\ngeneration device while a [SecureRandom] should be seen like a cryptographic PRNG. Thus, data from an [EntropySource] should\nbe seen as \"more random\" than that returned from a [SecureRandom].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"seed","id":"seed1()","comment":"Seed the RNG (usually the seed is obtained from an [EntropySource]).","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"29"},{"returnType":{"name":"Uint8","refId":"cipher.api/Uint8"},"kind":"method","name":"nextUint8","id":"nextUint80()","comment":"Get one byte long random int.","line":"32"},{"returnType":{"name":"Uint16","refId":"cipher.api/Uint16"},"kind":"method","name":"nextUint16","id":"nextUint160()","comment":"Get two bytes long random int.","line":"35"},{"returnType":{"name":"Uint32","refId":"cipher.api/Uint32"},"kind":"method","name":"nextUint32","id":"nextUint320()","comment":"Get four bytes long random int.","line":"38"},{"returnType":{"name":"BigInteger","refId":"bignum/BigInteger"},"kind":"method","name":"nextBigInteger","id":"nextBigInteger1()","comment":"Get a random [BigInteger] of [bitLength] bits.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"bitLength","id":"bitLength"}],"line":"41"},{"returnType":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"method","name":"nextBytes","id":"nextBytes1()","comment":"Get a list of bytes of arbitrary length.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"44"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this secure random standard algorithm name.","line":"26"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [SecureRandom] algorithms","line":"20"},{"returnType":{"name":"SecureRandom","refId":"cipher.api/SecureRandom"},"kind":"constructor","name":"","id":"1()","comment":"Create the secure random specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"23"}],"uri":"package:cipher/src/api/random.dart","line":"17"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"KeyGenerator","id":"KeyGenerator","comment":"\nThe interface that asymmetric key generators conform to.\n\nA [KeyGenerator] is used to create a pair of public and private keys.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init1()","comment":"\nInit the generator with its initialization [params]. The type of [CipherParameters] depends on the algorithm being used\n(see the documentation of each implementation to find out more).\n","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"84"},{"returnType":{"name":"AsymmetricKeyPair","refId":"cipher.api/AsymmetricKeyPair"},"kind":"method","name":"generateKeyPair","id":"generateKeyPair0()","comment":"Generate a new key pair.","line":"87"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this generator's standard algorithm name.","line":"78"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [KeyGenerator] algorithms","line":"72"},{"returnType":{"name":"KeyGenerator","refId":"cipher.api/KeyGenerator"},"kind":"constructor","name":"","id":"1()","comment":"Create the key generator specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"75"}],"uri":"package:cipher/src/api/asymmetric.dart","line":"69"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Signer","id":"Signer","comment":"An interface for DSAs (digital signature algorithms)","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"Reset the signer to its original state.","line":"46"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init2()","comment":"\nInit the signer with its initialization [params]. The type of [CipherParameters] depends on the algorithm being used (see\nthe documentation of each implementation to find out more).\n\nUse the argument [forSigning] to tell the signer if you want to generate or verify signatures.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"forSigning","id":"forSigning"},{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"54"},{"returnType":{"name":"Signature","refId":"cipher.api/Signature"},"kind":"method","name":"generateSignature","id":"generateSignature1()","comment":"Sign the passed in [message] (usually the output of a hash function)","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"message","id":"message"}],"line":"57"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"verifySignature","id":"verifySignature2()","comment":"Verify the [message] against the [signature].","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Signature","refId":"cipher.api/Signature"},"kind":"param","name":"signature","id":"signature"}],"line":"60"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this signer's standard algorithm name.","line":"43"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [Signer] algorithms","line":"37"},{"returnType":{"name":"Signer","refId":"cipher.api/Signer"},"kind":"constructor","name":"","id":"1()","comment":"Create the signer specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"40"}],"uri":"package:cipher/src/api/asymmetric.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Signature","id":"Signature","comment":"An interface for signatures created by a [Signer]","uri":"package:cipher/src/api/asymmetric.dart","line":"30"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"AsymmetricKeyPair","id":"AsymmetricKeyPair","comment":"A pair of public and private asymmetric keys.","children":[{"ref":{"name":"PublicKey","refId":"cipher.api/PublicKey"},"isFinal":true,"kind":"variable","name":"publicKey","id":"publicKey","line":"22"},{"ref":{"name":"PrivateKey","refId":"cipher.api/PrivateKey"},"isFinal":true,"kind":"variable","name":"privateKey","id":"privateKey","line":"23"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"PublicKey","refId":"cipher.api/PublicKey"},"initializedField":{"name":"publicKey","refId":"cipher.api/AsymmetricKeyPair/publicKey"},"kind":"param","name":"publicKey","id":"publicKey"},{"ref":{"name":"PrivateKey","refId":"cipher.api/PrivateKey"},"initializedField":{"name":"privateKey","refId":"cipher.api/AsymmetricKeyPair/privateKey"},"kind":"param","name":"privateKey","id":"privateKey"}],"line":"25"}],"uri":"package:cipher/src/api/asymmetric.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"AsymmetricKey","refId":"cipher.api/AsymmetricKey"}],"kind":"class","name":"PrivateKey","id":"PrivateKey","comment":"The interface that asymmetric private keys conform to.","uri":"package:cipher/src/api/asymmetric.dart","line":"16"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"AsymmetricKey","refId":"cipher.api/AsymmetricKey"}],"kind":"class","name":"PublicKey","id":"PublicKey","comment":"The interface that asymmetric public keys conform to.","uri":"package:cipher/src/api/asymmetric.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"AsymmetricKey","id":"AsymmetricKey","comment":"The interface that asymmetric (public and private) keys conform to.","uri":"package:cipher/src/api/asymmetric.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"KeyDerivator","id":"KeyDerivator","comment":"\nThe interface that a symmetric key derivator conforms to.\n\nA [KeyDerivator] is normally used to convert some master data (like a password, for instance) to a symmetric key.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init1()","comment":"\nInit the derivator with its initialization [params]. The type of [CipherParameters] depends on the algorithm being used\n(see the documentation of each implementation to find out more).\n","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"177"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"deriveKey","id":"deriveKey4()","comment":"Derive key from given input and put it in [out] at offset [outOff].","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"180"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this derivator's standard algorithm name.","line":"168"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"keySize","id":"keySize","comment":"Get this derivator key's output size.","line":"171"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [KeyDerivator] algorithms","line":"162"},{"returnType":{"name":"KeyDerivator","refId":"cipher.api/KeyDerivator"},"kind":"constructor","name":"","id":"1()","comment":"Create the key derivator specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"165"}],"uri":"package:cipher/src/api/symmetric.dart","line":"159"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Mac","id":"Mac","comment":"The interface that a MAC (message authentication code) conforms to.","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"Reset the MAC to its original state.","line":"129"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init1()","comment":"\nInit the MAC with its initialization [params]. The type of [CipherParameters] depends on the algorithm being used (see\nthe documentation of each implementation to find out more).\n","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"135"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"updateByte","id":"updateByte1()","comment":"Add one byte of data to the MAC input.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inp","id":"inp"}],"line":"138"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"update","id":"update3()","comment":"\nAdd [len] bytes of data contained in [inp], starting at position [inpOff]\nto the MAC'ed input.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"len","id":"len"}],"line":"144"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"doFinal","id":"doFinal2()","comment":"\nStore the MAC of previously given data in buffer [out] starting at\noffset [outOff]. This method returns the size of the digest.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"150"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this MAC's standard algorithm name.","line":"123"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"macSize","id":"macSize","comment":"Get this MAC's output size.","line":"126"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [Mac] algorithms","line":"117"},{"returnType":{"name":"Mac","refId":"cipher.api/Mac"},"kind":"constructor","name":"","id":"1()","comment":"Create the MAC specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"120"}],"uri":"package:cipher/src/api/symmetric.dart","line":"114"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StreamCipher","id":"StreamCipher","comment":"The interface stream ciphers conform to.","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"Reset the cipher to its original state.","line":"90"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init2()","comment":"\nInit the cipher with its initialization [params]. The type of\n[CipherParameters] depends on the algorithm being used (see the\ndocumentation of each implementation to find out more).\n\nUse the argument [forEncryption] to tell the cipher if you want to encrypt\nor decrypt data.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"forEncryption","id":"forEncryption"},{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"100"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"returnByte","id":"returnByte1()","comment":"Process one byte of data given by [inp] and return its encrypted value.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inp","id":"inp"}],"line":"103"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"processBytes","id":"processBytes5()","comment":"\nProcess [len] bytes of data given by [inp] and starting at offset [inpOff].\nThe resulting cipher text is put in [out] beginning at position [outOff].\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"len","id":"len"},{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"109"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this cipher's standard algorithm name.","line":"87"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [StreamCipher] algorithms","line":"81"},{"returnType":{"name":"StreamCipher","refId":"cipher.api/StreamCipher"},"kind":"constructor","name":"","id":"1()","comment":"Create the cipher specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"84"}],"uri":"package:cipher/src/api/symmetric.dart","line":"78"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"BlockCipher","refId":"cipher.api/BlockCipher"}],"kind":"class","name":"PaddedBlockCipher","id":"PaddedBlockCipher","comment":"\nAll padded block ciphers conform to this interface.\n\nA padded block cipher is a wrapper around a [BlockCipher] that allows padding the last procesed block if it is smaller\nthan the [blockSize].\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"doFinal","id":"doFinal4()","comment":"\nProcess the last block of data given by [inp] and starting at offset\n[inpOff] and pad it if necessary (i.e: if it is smaller than [blockSize]).\n\nThe resulting cipher text is put in [out] beginning at position [outOff].\n\nThis method returns the total bytes processed without taking the padding into account.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"73"},{"ref":{"name":"Padding","refId":"cipher.api/Padding"},"kind":"property","name":"padding","id":"padding","comment":"Get the underlying [Padding] used by this cipher.","line":"63"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [PaddedBlockCipher] algorithms","line":"57"},{"returnType":{"name":"PaddedBlockCipher","refId":"cipher.api/PaddedBlockCipher"},"kind":"constructor","name":"","id":"1()","comment":"Create the padded block cipher specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"60"}],"uri":"package:cipher/src/api/symmetric.dart","line":"54"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"BlockCipher","id":"BlockCipher","comment":"Block cipher engines are expected to conform to this interface.","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"Reset the cipher to its original state.","line":"23"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init2()","comment":"\nInit the cipher with its initialization [params]. The type of\n[CipherParameters] depends on the algorithm being used (see the\ndocumentation of each implementation to find out more).\n\nUse the argument [forEncryption] to tell the cipher if you want to encrypt\nor decrypt data.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"forEncryption","id":"forEncryption"},{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"kind":"param","name":"params","id":"params"}],"line":"33"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"processBlock","id":"processBlock4()","comment":"\nProcess a whole block of data given by [inp] and starting at offset\n[inpOff].\n\nThe resulting cipher text is put in [out] beginning at position [outOff].\n\nThis method returns the total bytes processed (which is the same as the\nblock size of the algorithm).\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"44"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this cipher's standard algorithm name.","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"blockSize","id":"blockSize","comment":"Get this ciphers's block size.","line":"20"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [BlockCipher] algorithms","line":"11"},{"returnType":{"name":"BlockCipher","refId":"cipher.api/BlockCipher"},"kind":"constructor","name":"","id":"1()","comment":"Create the cipher specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"14"}],"uri":"package:cipher/src/api/symmetric.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Padding","id":"Padding","comment":"The interface that a padding conforms to.","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"init","id":"init1()","comment":"Initialise the padder. Normally, paddings don't need any init params.","children":[{"ref":{"name":"CipherParameters","refId":"cipher.api/CipherParameters"},"isOptional":true,"kind":"param","name":"params","id":"params"}],"line":"55"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"addPadding","id":"addPadding2()","comment":"\nAdd the pad bytes to the passed in block, returning the number of bytes\nadded.\n\nNote: this assumes that the last block of plain text is always passed to it\ninside [data]. i.e. if [offset] is zero, indicating the entire block is to\nbe overwritten with padding the value of [data] should be the same as the\nlast block of plain text. The reason for this is that some modes such as\n\"trailing bit compliment\" base the padding on the last byte of plain text.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"data","id":"data"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"line":"67"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"padCount","id":"padCount1()","comment":"Get the number of pad bytes present in the block.","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"data","id":"data"}],"line":"70"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this padding's standard algorithm name.","line":"52"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [Padding] algorithms","line":"46"},{"returnType":{"name":"Padding","refId":"cipher.api/Padding"},"kind":"constructor","name":"","id":"1()","comment":"Create the digest specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"49"}],"uri":"package:cipher/src/api/unkeyed.dart","line":"43"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Digest","id":"Digest","comment":"The interface that a message digest conforms to.","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"Reset the digest to its original state.","line":"23"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"updateByte","id":"updateByte1()","comment":"Add one byte of data to the digested input.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inp","id":"inp"}],"line":"26"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"update","id":"update3()","comment":"\nAdd [len] bytes of data contained in [inp], starting at position [inpOff]\nti the digested input.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"inp","id":"inp"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"inpOff","id":"inpOff"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"len","id":"len"}],"line":"32"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"doFinal","id":"doFinal2()","comment":"\nStore the digest of previously given data in buffer [out] starting at\noffset [outOff]. This method returns the size of the digest.\n","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"38"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"algorithmName","id":"algorithmName","comment":"Get this digest's standard algorithm name.","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"digestSize","id":"digestSize","comment":"Get this digest's output size.","line":"20"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"registry","id":"registry","comment":"The [Registry] for [Digest] algorithms","line":"11"},{"returnType":{"name":"Digest","refId":"cipher.api/Digest"},"kind":"constructor","name":"","id":"1()","comment":"Create the digest specified by the standard [algorithmName].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"14"}],"uri":"package:cipher/src/api/unkeyed.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"UintX","id":"UintX","comment":"Base class for unsigned fixed size nums","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_clip","id":"_clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"80"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"kind":"method","name":"_coerce","id":"_coerce1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"81"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"toInt","id":"toInt0()","comment":"Convert to a regular [int].","line":"84"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"87"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<","id":"<1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"88"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<=","id":"<=1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">","id":">1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"90"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">=","id":">=1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"91"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","line":"93"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"~","id":"~0()","line":"94"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"+","id":"+1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"96"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"-","id":"-1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"97"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"*","id":"*1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"98"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"/","id":"#slash1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"99"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"%","id":"%1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"100"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"&","id":"&1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"102"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"|","id":"|1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"103"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"^","id":"^1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"104"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":"<<","id":"<<1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"106"},{"returnType":{"name":"UintX","refId":"cipher.api/UintX"},"isOperator":true,"kind":"method","name":">>","id":">>1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"107"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"rotl","id":"rotl1()","comment":"Circular shift left","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"110"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"rotr","id":"rotr1()","comment":"Circular shift right","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"117"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"toBigEndian","id":"toBigEndian2()","comment":"Conversion of endianness","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"124"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"toLittleEndian","id":"toLittleEndian2()","comment":"Conversion of endianness","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"out","id":"out"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"outOff","id":"outOff"}],"line":"134"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_int","id":"_int1()","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"143"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bitLength","id":"bitLength","comment":"Get the bit length of this integer","line":"75"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"byteLength","id":"byteLength","comment":"Get the byte length of this integer","line":"78"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"85"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"67"},{"kind":"constructor","name":"","id":"1()","comment":"Create an [UintX] from a given [value]. The value can be clipped if it cannot fit into this [UintX].","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"70"}],"uri":"package:cipher/src/ufixnum.dart","line":"65"},{"superclass":{"name":"UintX","refId":"cipher.api/UintX"},"kind":"class","name":"Uint32","id":"Uint32","comment":"Implementation of unsigned 32-bit size nums","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"clip","id":"clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"46"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_clip","id":"_clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"59"},{"returnType":{"name":"Uint32","refId":"cipher.api/Uint32"},"kind":"method","name":"_coerce","id":"_coerce1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bitLength","id":"bitLength","line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"byteLength","id":"byteLength","line":"57"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"48"},{"kind":"constructor","name":"fromBigEndian","id":"fromBigEndian2()","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"line":"50"},{"kind":"constructor","name":"fromLittleEndian","id":"fromLittleEndian2()","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"line":"53"}],"uri":"package:cipher/src/ufixnum.dart","line":"44"},{"superclass":{"name":"UintX","refId":"cipher.api/UintX"},"kind":"class","name":"Uint16","id":"Uint16","comment":"Implementation of unsigned 16-bit size nums","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"clip","id":"clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"25"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_clip","id":"_clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"38"},{"returnType":{"name":"Uint16","refId":"cipher.api/Uint16"},"kind":"method","name":"_coerce","id":"_coerce1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bitLength","id":"bitLength","line":"35"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"byteLength","id":"byteLength","line":"36"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"27"},{"kind":"constructor","name":"fromBigEndian","id":"fromBigEndian2()","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"line":"29"},{"kind":"constructor","name":"fromLittleEndian","id":"fromLittleEndian2()","children":[{"ref":{"name":"Uint8List","refId":"dart.typed_data/Uint8List"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"line":"32"}],"uri":"package:cipher/src/ufixnum.dart","line":"23"},{"superclass":{"name":"UintX","refId":"cipher.api/UintX"},"kind":"class","name":"Uint8","id":"Uint8","comment":"Implementation of unsigned 8-bit size nums","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"clip","id":"clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"10"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_clip","id":"_clip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"17"},{"returnType":{"name":"Uint8","refId":"cipher.api/Uint8"},"kind":"method","name":"_coerce","id":"_coerce1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bitLength","id":"bitLength","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"byteLength","id":"byteLength","line":"15"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"12"}],"uri":"package:cipher/src/ufixnum.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Registry","id":"Registry","comment":"A registry holds the map of factories indexed by algorithm names.","children":[{"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"Shorthand for [registerStaticFactory]","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"factory","id":"factory","children":[{"returnType":{"name":"T","refId":"cipher.api/Registry/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"String","id":"String","uri":"package:cipher/src/registry.dart","line":"14"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"14"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"registerStaticFactory","id":"registerStaticFactory2()","comment":"Register an algorithm by its name.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"factory","id":"factory","children":[{"returnType":{"name":"T","refId":"cipher.api/Registry/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"String","id":"String","uri":"package:cipher/src/registry.dart","line":"18"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"18"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"registerDynamicFactory","id":"registerDynamicFactory1()","comment":"Register an algorithm factory method which can translate a variable algorithm name into an implementation.","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"factory","id":"factory","children":[{"returnType":{"name":"T","refId":"cipher.api/Registry/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"String","id":"String","uri":"package:cipher/src/registry.dart","line":"23"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"23"},{"returnType":{"name":"T","refId":"cipher.api/Registry/T"},"kind":"method","name":"create","id":"create1()","comment":"Create an algorithm given its name","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"algorithmName","id":"algorithmName"}],"line":"28"},{"isFinal":true,"kind":"variable","name":"_staticFactories","id":"_staticFactories","isPrivate":true,"line":"10"},{"isFinal":true,"kind":"variable","name":"_dynamicFactories","id":"_dynamicFactories","isPrivate":true,"line":"11"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"package:cipher/src/registry.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"CipherParameters","id":"CipherParameters","comment":"All cipher initialization parameters classes implement this.","line":"28"}],"uri":"package:cipher/api.dart","line":"11"}