// Copyright (c) 2013-present, Iván Zaera Avellón - izaera@gmail.com

// This library is dually licensed under LGPL 3 and MPL 2.0. See file LICENSE for more information.

// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of
// the MPL was not distributed with this file, you can obtain one at http://mozilla.org/MPL/2.0/.

library cipher.test.key_generators.rsa_key_generator_test;

import 'package:bignum/bignum.dart';

import 'package:cipher/cipher.dart';

import "../test/src/fixed_secure_random.dart";
import '../test/key_generators_tests.dart';

void main() {

  initCipher();
  SecureRandom.registry["Fixed"] = (name, params) => new FixedSecureRandom();

  var rsapars = new RSAKeyGeneratorParameters(new BigInteger("65537"), 2048, 12);

  var keyGenerator = new KeyGenerator("Fixed/RSA", {
    Param.BitStrength: 2048,
    RSAKeyGeneratorParam.PublicExponent: new BigInteger("65537"),
    RSAKeyGeneratorParam.Certainty: 12
  });

  runKeyGeneratorTests(
      keyGenerator,
      [
          _keyPair(
              "246496636920471644447906431721093700561587092349772033686501475153752454952134425671"
                  "59484352023028564722607846088040100966055452012530635310929880142309672672370384"
                  "51341436168866770649943971742834768959275369642361098857089571421492090862210652"
                  "77445965384034689570282261057124204190533551654865239225780293606136669946423311"
                  "40679324765028868432884033287641095549662040120859273059357594690379309402039994"
                  "71223770923359860672398653744010901002859144053910647366049578494326501639789977"
                  "98819169200747351040055660185758938353929606970740838207487292439328356847091991"
                  "84189144330411532000389215869317902155568589589990937",
              "65537",
              "406395801139157440569392708660209871457031681773545756440277772714084452409755171793"
                  "27437695287978339232460713334646579937780056913711874900376482740689383588654043"
                  "46665886110838985133992189859366415704864484029740707257099473459148578934981171"
                  "43415727905533488076491116578761161828999652964099502545822370932484829578418298"
                  "16535214357751359904681515756174153774023596006491965859780934688701690200456270"
                  "61059125356549455475504958158218546129405411183104108490830376537830617352916950"
                  "23041709919271131886805403004746662650944671990785066665743608256974799690917037"
                  "9147599626458818599142452671385912424304169295269813",
              "172622988945032241272460594823465727338165469761128582817141296878210996104803340949"
                  "36854007432524338464271875468822464204490379127727060771342666742599828289417012"
                  "65602699532189573128072902426941671121523027732913307899478669487291886257844608"
                  "92934126377883318018638038433339229978409110366812585246469634979",
              "142794791369857893518216846152178512365742893193381905408671045383524196038880042688"
                  "22248466532141696672699682618009136962508465934703999738442783988448187504837056"
                  "50947713414552095790845760035894168289734252889566906196448479671932974113221860"
                  "95969144940769802524422661706293551748267739368517289465924234003")]);

}

AsymmetricKeyPair _keyPair(String n, String e, String d, String p, String q) =>
    new AsymmetricKeyPair(
        new RSAPublicKey(new BigInteger(n), new BigInteger(e)),
        new RSAPrivateKey(new BigInteger(n), new BigInteger(d), new BigInteger(p), new BigInteger(q)));
